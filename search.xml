<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/2018/07/24/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/24/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>一、Git<br>    Git是一个分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。什么是版本控制系统？当你写一篇文章，想要删除或者修改一部分内容，但是担心以后想恢复又找不到的时候，常常会把这篇文章保存到一个新的文档里进行修改。当再次遇到想要修改的内容时，会不断重复之前的操作，但是这种做法会产生许多文件。可能当时你还能分清楚哪个文件修改了哪一段，保存了什么内容，但是过一段时间你想要查找被修改的内容时，就需要到一个一个文档里去找。一堆文件想删又不敢删，生怕哪天可能会用到它。。。<br>    这种情况还只是你自己一个人对文档操作。在工作实际工作中，需要修改的文件不止一个，可能修改文件的人也不止你一个，那个时候问题会变得更加复杂。这个时候采用版本控制系统（VCS）是个明智的选择。有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态。你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。</p><p>二、Git安装<br>    这篇博客是在Windows上安装和使用Git基础上的一个学习笔记。<br>    (1)首先从Git官网上直接下载安装程序，然后按照默认选项安装即可。<br>    下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a><br>    (2)安装完成后，找到你安装目录”Git”-&gt;右键选择”Git Bash”<br>    (3)设置，在命令行内输入：<br>        $ git config –global user.name “Your Name”<br>        $ git config –global user.email “Your Email”</p><p>三、创建版本库<br>    (1)在合适的地方，建一个空的目录。<br>        $ mkdir learngit   //建了一个叫learngit的空文件夹<br>        $ cd learngit      //将当前目录切换至learngit下<br>        $ pwd              //显示当前目录<br>        /f/LearnGit        //我的仓库位置<br>    (2)通过git init命令把这个目录变成Git可以管理的仓库：<br>        $ git init<br>        到这里仓库就建好了，下面是将文件添加进仓库中的操作。<br>    (3)建一个readme.txt的文件，以这个文件为例。<br>    (4)用命令git add告诉Git，把文件添加到仓库:<br>        $ git add readme.txt<br>    (5)用命令git commit告诉Git，把文件提交到仓库：<br>        $ git commit -m “wrote a readme file”<br>    commit可以一次提交很多文件，所以你可以多次add不同的文件。</p><p>四、版本退回<br>    (1)git log命令显示从最近到最远的提交日志：<br>        $ git log<br>    (2)命令git reflog用来记录你的每一次命令：<br>        $ git reflog<br>    (3)在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写成HEAD~100.把当前版<br>        本退回到上一个版本可以使用git reset命令：<br>        $ git reset –hard HEAD^<br>    (4)使用命令git reset –hard commit_id,可以使HEAD指向任意版本。<br>        $git reset –hard commit_id</p><p>五、工作区和暂存区<br>    Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。<br>    (1)工作区：就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区。<br>    (2)暂存区：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。Git的版本库里存了很多东西，其中最重要的就是称为<br>        stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。<br>    (3)用git add把文件添加进去，实际上就是把文件修改添加到暂存区;用git commit提交更改,实际上就是把暂存区的所有内容提交到<br>        当前分支。<br>    (4)git status命令查看当前状态：<br>        $ git status<br>    (5)每次修改，如果不用git add到暂存区，那就不会加入到commit中。</p><p>六、撤销修改<br>    (1)场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。<br>            (工作区改变，未add，回到历史版本；如果已经add，然后修改，但是未commit，回到2)<br>        场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD<br>            <file>，就回到了场景1，第二步按场景1操作。(工作区改变，并且add到了暂存区，未commit，回到1)<br>        场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。<br>            (已经commit，未push)<br>    (2)git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令。</file></p><p>七、删除文件<br>    (1)命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新    版本，你会丢失最近一次提交后你修改的内容。<br>        (这种情况不能使用checkout，因为已经commit，版本库里面的也被修改了，只能通过git reset –hard退回到上一个版本)。<br>    (2)git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。<br>    (3)使用命令git rm，Git知道你删除了文件，因此，工作区和版本库就不一致了。现在你有两个选择，一是确实要从版本库中删除该文<br>        件，那就用命令git rm删掉，并且git commit。这种情况是真的把文件删掉了。<br>        另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：$ git checkout –<file>。</file></p><p>八、创建与合并分支<br>    (1)分支：你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，    直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。<br>    (2)查看分支：git branch<br>        创建分支：git branch <name><br>        切换分支：git checkout <name><br>        创建+切换分支：git checkout -b <name><br>        合并某分支到当前分支：git merge <name><br>        删除分支：git branch -d <name></name></name></name></name></name></p><p>九、解决冲突<br>    (1)当混帐无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>    (2)解决冲突就是把Git的合并失败的文件手动编辑为我们希望的内容，再提交。<br>    (3)用git log –graph命令可以看到分支合并图产品。</p><p>十、分支策略<br>    在实际开发中，我们应该按照几个基本原则进行分支管理：<br>    首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p><p>十一、标签<br>    默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？<br>    方法是找到历史提交的commit id，然后打上就可以了。</p><p>十二、学习地址<br>    Git学习博客，讲解的很清楚。<br>    <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>]]></content>
      
      
      <categories>
          
          <category> Git学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
